{"version":3,"sources":["components/MovieCard/MovieCard.tsx","components/MoviesList/MoviesList.tsx","components/TextField/TextField.tsx","components/NewMovie/NewMovie.tsx","App.tsx","index.tsx"],"names":["MovieCard","movie","className","src","imgUrl","alt","title","description","href","imdbUrl","MoviesList","movies","map","imdbId","TextField","name","value","label","required","onChange","validationCallback","useState","Math","random","toString","slice","id","touched","setToched","isValid","setIsValid","hasError","htmlFor","classNames","type","placeholder","event","target","onBlur","isValueValid","NewMovie","onAdd","count","setCount","setTitle","setDescription","setImgUrl","setImdbUrl","setImdbId","validateUrl","test","isDisabled","length","onSubmit","preventDefault","disabled","App","moviesFromServer","setMovies","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.b39896d2.chunk.js","sourcesContent":["import React from 'react';\nimport { Movie } from '../../types/Movie';\nimport './MovieCard.scss';\n\ntype Props = {\n  movie: Movie,\n};\n\nexport const MovieCard: React.FC<Props> = ({ movie }) => (\n  <div className=\"card\" data-cy=\"movie-card\">\n    <div className=\"card-image\">\n      <figure className=\"image is-4by3\">\n        <img\n          src={movie.imgUrl}\n          alt=\"Film logo\"\n        />\n      </figure>\n    </div>\n    <div className=\"card-content\">\n      <div className=\"media\">\n        <div className=\"media-left\">\n          <figure className=\"image is-48x48\">\n            <img\n              src=\"images/imdb-logo.jpeg\"\n              alt=\"imdb\"\n            />\n          </figure>\n        </div>\n        <div className=\"media-content\">\n          <p className=\"title is-8\">{movie.title}</p>\n        </div>\n      </div>\n\n      <div className=\"content\">\n        {movie.description}\n        <br />\n        <a href={movie.imdbUrl}>IMDB</a>\n      </div>\n    </div>\n  </div>\n);\n","import React from 'react';\n\nimport './MoviesList.scss';\nimport { MovieCard } from '../MovieCard';\nimport { Movie } from '../../types/Movie';\n\ninterface Props {\n  movies: Movie[];\n}\n\nexport const MoviesList: React.FC<Props> = ({ movies }) => (\n  <div className=\"movies\">\n    {movies.map(movie => (\n      <MovieCard\n        key={movie.imdbId}\n        movie={movie}\n      />\n    ))}\n  </div>\n);\n","import classNames from 'classnames';\nimport React, { useState } from 'react';\n\ntype Props = {\n  name: string,\n  value: string,\n  label?: string,\n  required?: boolean,\n  onChange?: (newValue: string) => void,\n  validationCallback?: (value: string) => boolean,\n};\n\nfunction getRandomDigits() {\n  return Math.random().toString().slice(2);\n}\n\nexport const TextField: React.FC<Props> = ({\n  name,\n  value,\n  label = name,\n  required = false,\n  onChange = () => {},\n  validationCallback,\n}) => {\n  // generage a unique id once on component load\n  const [id] = useState(() => `${name}-${getRandomDigits()}`);\n\n  // To show errors only if the field was touched (onBlur)\n  const [touched, setToched] = useState(false);\n  const [isValid, setIsValid] = useState(true);\n  const hasError = touched && required && (!value || !isValid);\n\n  const handleBlur = () => {\n    setToched(true);\n    if (validationCallback) {\n      const isValueValid = validationCallback(value);\n\n      setIsValid(isValueValid);\n    }\n  };\n\n  return (\n    <div className=\"field\">\n      <label className=\"label\" htmlFor={id}>\n        {label}\n      </label>\n\n      <div className=\"control\">\n        <input\n          id={id}\n          data-cy={`movie-${name}`}\n          className={classNames('input', {\n            'is-danger': hasError,\n          })}\n          type=\"text\"\n          placeholder={`Enter ${label}`}\n          value={value}\n          onChange={event => onChange(event.target.value)}\n          onBlur={handleBlur}\n        />\n      </div>\n\n      {hasError && (\n        <p className=\"help is-danger\">{`${label} is required`}</p>\n      )}\n    </div>\n  );\n};\n","import { useState } from 'react';\nimport { Movie } from '../../types/Movie';\nimport { TextField } from '../TextField';\n\ninterface Props {\n  onAdd: (arg: Movie) => void;\n}\n\nexport const NewMovie = ({ onAdd }: Props) => {\n  // Increase the count after successful form submission\n  // to reset touched status of all the `Field`s\n  const [count, setCount] = useState(0);\n  const [title, setTitle] = useState('');\n  const [description, setDescription] = useState('');\n  const [imgUrl, setImgUrl] = useState('');\n  const [imdbUrl, setImdbUrl] = useState('');\n  const [imdbId, setImdbId] = useState('');\n\n  const resetForm = () => {\n    setCount(count + 1);\n    setTitle('');\n    setDescription('');\n    setImgUrl('');\n    setImdbUrl('');\n    setImdbId('');\n  };\n\n  const handleSubmit = (event: React.FormEvent) => {\n    event.preventDefault();\n    onAdd({\n      title,\n      description,\n      imgUrl,\n      imdbUrl,\n      imdbId,\n    });\n    resetForm();\n  };\n\n  const validateUrl = (value: string) => {\n    // eslint-disable-next-line\n    const pattern = /^((([A-Za-z]{3,9}:(?:\\/\\/)?)(?:[-;:&=+$,\\w]+@)?[A-Za-z0-9.-]+|(?:www\\.|[-;:&=+$,\\w]+@)[A-Za-z0-9.-]+)((?:\\/[+~%/.\\w-_]*)?\\??(?:[-+=&;%@,.\\w_]*)#?(?:[,.!/\\\\\\w]*))?)$/;\n\n    return pattern.test(value);\n  };\n\n  const isDisabled = !title.length\n    || !imgUrl.length\n    || !imdbUrl.length\n    || !imdbId.length\n    || !validateUrl(imgUrl)\n    || !validateUrl(imdbUrl);\n\n  return (\n    <form\n      className=\"NewMovie\"\n      key={count}\n      onSubmit={handleSubmit}\n    >\n      <h2 className=\"title\">Add a movie</h2>\n\n      <TextField\n        name=\"title\"\n        label=\"Title\"\n        value={title}\n        onChange={setTitle}\n        required\n      />\n\n      <TextField\n        name=\"description\"\n        label=\"Description\"\n        value={description}\n        onChange={setDescription}\n      />\n\n      <TextField\n        name=\"imgUrl\"\n        label=\"Image URL\"\n        value={imgUrl}\n        onChange={setImgUrl}\n        validationCallback={validateUrl}\n        required\n      />\n\n      <TextField\n        name=\"imdbUrl\"\n        label=\"Imdb URL\"\n        value={imdbUrl}\n        onChange={setImdbUrl}\n        validationCallback={validateUrl}\n        required\n      />\n\n      <TextField\n        name=\"imdbId\"\n        label=\"Imdb ID\"\n        value={imdbId}\n        onChange={setImdbId}\n        required\n      />\n\n      <div className=\"field is-grouped\">\n        <div className=\"control\">\n          <button\n            type=\"submit\"\n            data-cy=\"submit-button\"\n            className=\"button is-link\"\n            disabled={isDisabled}\n          >\n            Add\n          </button>\n        </div>\n      </div>\n    </form>\n  );\n};\n","import { useState } from 'react';\nimport './App.scss';\nimport { MoviesList } from './components/MoviesList';\nimport { NewMovie } from './components/NewMovie';\nimport { Movie } from './types/Movie';\nimport moviesFromServer from './api/movies.json';\n\nexport const App: React.FC = () => {\n  const [movies, setMovies] = useState(moviesFromServer);\n\n  const addMovie = (movie: Movie) => setMovies([...movies, movie]);\n\n  return (\n    <div className=\"page\">\n      <div className=\"page-content\">\n        <MoviesList movies={movies} />\n      </div>\n      <div className=\"sidebar\">\n        <NewMovie onAdd={addMovie} />\n      </div>\n    </div>\n  );\n};\n","import ReactDOM from 'react-dom';\nimport 'bulma/css/bulma.css';\nimport { App } from './App';\n\nReactDOM.render(<App />, document.getElementById('root'));\n"],"sourceRoot":""}